import com.android.build.OutputFile
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}

android {
    signingConfigs {
        androidkeystore {
            keyAlias 'android_alias'
            keyPassword 'android'
            storeFile file('E:/android.jks')
            storePassword 'android'
        }
    }
    buildToolsVersion rootProject.buildToolsVersion
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.github.shadowsocks"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.sdkVersion
        versionCode 4060100
        versionName "4.6.1"
        flavorDimensions "company"
        testApplicationId "com.github.shadowsocks.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "fa", "fr", "ja", "ko", "ru", "zh-rCN", "zh-rTW"
    }
    buildTypes {
        debug {
            multiDexEnabled true
            pseudoLocalesEnabled true
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions.checkReleaseBuilds false
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86'
            universalApk true
        }
    }
    sourceSets.main.jniLibs.srcDirs +=
            new File(project(':core').buildDir, "intermediates/bundles/${getCurrentFlavor()}/jni")
    sourceSets.main.jniLibs.srcDirs += new File(project(':core').projectDir, "src/overture/bin")

    //多渠道打包
    productFlavors {
        xiaomi {
            manifestPlaceholders = [CHANNEL_VALUE: "xiaomi"]
        }
        baidu {
            manifestPlaceholders = [CHANNEL_VALUE: "baidu"]
        }
        google {
            manifestPlaceholders = [CHANNEL_VALUE: "google"]
        }
        bsw {
            manifestPlaceholders = [CHANNEL_VALUE: "bsw"]
        }
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }
}

dependencies {
    implementation project(':core')
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'com.google.android.gms:play-services-vision:15.0.2'
    implementation 'com.google.firebase:firebase-ads:15.0.1'
    implementation "com.takisoft.preferencex:preferencex-simplemenu:$preferencexVersion"
    implementation 'com.twofortyfouram:android-plugin-api-for-locale:1.0.4'
    implementation 'net.glxn.qrgen:android:2.0'
    implementation 'xyz.belvi.mobilevision:barcodescanner:2.0.3'

    implementation 'me.jessyan:arms:2.5.0'
    kapt rootProject.ext.dependencies["butterknife-compiler"] //Butterknife 插件, 很多人因为没加这个而报错, 切记!!!
    kapt rootProject.ext.dependencies["dagger2-compiler"]//依赖插件

    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$androidTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidEspressoVersion"
}
repositories {
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3]
if (getCurrentFlavor() == 'release') android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def offset = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
    }
}

apply plugin: 'kotlin-android-extensions'